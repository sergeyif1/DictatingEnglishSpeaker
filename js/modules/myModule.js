// myModule.js
import processLines from "./processLines.js";
import countdown from "./countdownTimer.js";
import { getRequestAdd } from "./seleDictionary.js";

import { from, lastValueFrom } from "rxjs";
import { groupBy, mergeMap, toArray } from "rxjs/operators";

let isPaused = false;
let isRunning = false; // —Ñ–ª–∞–≥, —á—Ç–æ words() —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
let currentID = null;
let count_n_Word = null;

const myModule = {
  useCountNWord: function (n_Word) {
    count_n_Word = n_Word;
    console.log("Count N Word set to:", count_n_Word);
  },

  setID: function (newID) {
    currentID = newID;
    console.log("Current ID set to:", currentID);
  },

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  words: async function () {
    if (typeof window === "undefined") return;
    if (isRunning) {
      console.warn("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –Ω–µ–ª—å–∑—è.");
      return;
    }

    isRunning = true;
    console.log("üåê –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (words) –≤ –±—Ä–∞—É–∑–µ—Ä–µ...");

    try {
      const requestAdd = getRequestAdd();
      console.log("üì• –†–µ–∑—É–ª—å—Ç–∞—Ç getRequestAdd():", requestAdd);

      const filePaths = Array.isArray(requestAdd) ? requestAdd : [requestAdd];
      console.log("üìÇ –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:", filePaths);

      const sec = Number(document.querySelector("#gap").value) * 1000;
      const foundObjects = [];

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã
      for (const filePath of filePaths) {
        if (!filePath) continue;
        console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);

        const response = await fetch(filePath);
        if (!response.ok) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: ${filePath}`);
          continue;
        }

        const text = await response.text();
        const jsonData = JSON.parse(text);

        let dataArray = [];
        if (Array.isArray(jsonData)) dataArray = jsonData;
        else if (Array.isArray(jsonData.dictionary))
          dataArray = jsonData.dictionary;
        else {
          console.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON:", jsonData);
          continue;
        }

        const filtered = currentID
          ? dataArray.filter((item) => {
              const idNum = Number(item.id);
              return (
                idNum >= Number(currentID) &&
                idNum <= Number(currentID) + Number(count_n_Word) - 1
              );
            })
          : dataArray.slice(0, count_n_Word);

        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${filtered.length} –∑–∞–ø–∏—Å–µ–π –≤ ${filePath}`);
        foundObjects.push(...filtered);
      }

      if (foundObjects.length === 0) {
        console.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
        return;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ id (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
      const groupedById = await lastValueFrom(
        from(foundObjects).pipe(
          groupBy((item) => item.id),
          mergeMap((group) => group.pipe(toArray())),
          toArray()
        )
      );

      console.log("‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ ID:");
      console.log(groupedById);
      console.log(
        "‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–æ—á–µ—Ä—ë–¥–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π..."
      );

      const startId = Number(currentID);
      const endId = startId + Number(count_n_Word) - 1;

      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ ‚Äî –∏ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –ø–æ –∑–∞–ø–∏—Å—è–º
      for (const group of groupedById) {
        const groupId = Number(group[0]?.id);

        // –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
        if (groupId > endId) {
          console.log(
            `‚èπ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ID (${groupId} > ${endId}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.`
          );
          break;
        }

        for (const entry of group) {
          // –ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –ø–∞—É–∑—É ‚Äî –∂–¥–µ–º, –ø–æ–∫–∞ isPaused –Ω–µ —Å—Ç–∞–Ω–µ—Ç false
          while (isPaused) {
            // –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∂–¥—ë–º
            await new Promise((resolve) => setTimeout(resolve, 100));
          }

          // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
          const initialSeconds = sec / 1000;
          countdown(initialSeconds, initialSeconds);

          // –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–ø–∏—Å–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
          console.log(`‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ ID=${entry.id} (${entry.name})`);
          await processLines(JSON.stringify(entry));

          // –ñ–¥—ë–º –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
          await new Promise((resolve) => setTimeout(resolve, sec));
        }
      }

      console.log("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:", error);
    } finally {
      isRunning = false;
      console.log("üèÅ words() –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.");
    }
  },

  // pause/resume ‚Äî –¢–û–õ–¨–ö–û —Ñ–ª–∞–≥–∏ (–Ω–µ –¥–µ—Ä–≥–∞–µ–º speechSynthesis –∑–¥–µ—Å—å)
  pause: function () {
    if (!isPaused) {
      isPaused = true;
      console.log(
        "‚è∏Ô∏è myModule: —Ñ–ª–∞–≥ isPaused = true (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É)."
      );
    } else {
      console.log("‚ö†Ô∏è myModule: —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ.");
    }
  },

  resume: function () {
    if (isPaused) {
      isPaused = false;
      console.log(
        "‚ñ∂Ô∏è myModule: —Ñ–ª–∞–≥ isPaused = false (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è)."
      );
      // –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî —Ü–∏–∫–ª –≤–Ω—É—Ç—Ä–∏ words() –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É.
    } else {
      console.log("‚ö†Ô∏è myModule: –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –±—ã–ª –Ω–∞ –ø–∞—É–∑–µ.");
    }
  },

  // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≥–µ—Ç—Ç–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π/UI
  isPaused: function () {
    return !!isPaused;
  },

  isRunning: function () {
    return !!isRunning;
  },
};

export default myModule;

// import processLines from "./processLines.js";
// import countdown from "./countdownTimer.js";
// import { getRequestAdd } from "./seleDictionary.js";

// import { from, lastValueFrom } from "rxjs";
// import { groupBy, mergeMap, toArray } from "rxjs/operators";

// let isPaused = false;
// let isRunning = false; // —Ñ–ª–∞–≥, —á—Ç–æ words() —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
// let currentID = null;
// let count_n_Word = null;

// const myModule = {
//   useCountNWord: function (n_Word) {
//     count_n_Word = n_Word;
//     console.log("Count N Word set to:", count_n_Word);
//   },

//   setID: function (newID) {
//     currentID = newID;
//     console.log("Current ID set to:", currentID);
//   },

//   words: async function () {
//     if (typeof window === "undefined") return;
//     console.log("Running in browser environment");

//     const requestAdd = getRequestAdd();
//     console.log("üì• –†–µ–∑—É–ª—å—Ç–∞—Ç getRequestAdd():", requestAdd);

//     // //--------------------------------------------------------------------------------
//     //1. —Ç—É—Ç –Ω–∞–¥–æ –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ foundObjects –Ω–∞—á–∞—Ç—å, —á–∏—Ç–∞—Ç—å –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ processLines –ø–æ –æ–¥–Ω–æ–π
//     // 2. –ø–µ—Ä–µ–¥–∞—á–∞ –∑–∞–ø–∏—Å–∏ –≤ processLines –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ -----------------while (isPaused) {
//     //               await new Promise((resolve) => setTimeout(resolve, 100));
//     //             }
//     //             const initialSeconds = sec / 1000;
//     //             countdown(initialSeconds, initialSeconds);

//     //             window.speechSynthesis.cancel();
//     //             processLines(...........);-------------------
//     // //3. –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á—Ç–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏, —á–∏—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–∑ foundObjects –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ processLines –ø–æ–≤—Ç–æ—Ä—è—è –ø—Ä–æ—Ü–µ—Å—Å
//     // //4. –∏ —Ç–∞–∫ –ø–æ–∫–∞ –Ω–µ –∫–æ–Ω—á–∞—Ç—Å—è –∑–∞–ø–∏—Å–∏ –≤ foundObjects
//     // //5. –∫–æ–≥–¥–∞ –∫–æ–Ω—á–∞—Ç—Å—è –∑–∞–ø–∏—Å–∏ –≤ foundObjects, —Ç–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
//     // //--------------------------------------------------------------------------------

//     const filePaths = Array.isArray(requestAdd) ? requestAdd : [requestAdd];
//     console.log("üìÇ –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:", filePaths);

//     const sec = Number(document.querySelector("#gap").value) * 1000;
//     const foundObjects = [];

//     try {
//       // 1. –ø–æ–æ—á–µ—Ä–µ–¥–Ω—ã–π –≤—ã–∑–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ filePaths
//       // 2. –≤—ã–∑–≤–∞–≤ —Ñ–∞–π–ª , —á–∏—Ç–∞–µ–º –µ–≥–æ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ –æ—Ç–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ id
//       // 3. –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ id –≤ foundObject
//       // 4. –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º 2-4
//       // 5. —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º 2-4
//       // 6. –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
//       // 7. –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤,  –≥—Ä—É–ø–ø–∏—Ä—É–µ–º foundObjects –ø–æ id
//       // 8. –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –≤–µ—Å—å foundObjects –≤ –≤–∏–¥–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

//       // 2. –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
//       for (const filePath of filePaths) {
//         if (!filePath) continue;
//         console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);

//         const response = await fetch(filePath);
//         if (!response.ok) {
//           console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: ${filePath}`);
//           continue;
//         }

//         const text = await response.text();
//         const jsonData = JSON.parse(text);

//         let dataArray = [];
//         if (Array.isArray(jsonData)) dataArray = jsonData;
//         else if (Array.isArray(jsonData.dictionary))
//           dataArray = jsonData.dictionary;
//         else {
//           console.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON:", jsonData);
//           continue;
//         }

//         // 2. –û—Ç–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID
//         const filtered = currentID
//           ? dataArray.filter((item) => {
//               const idNum = Number(item.id);
//               return (
//                 idNum >= Number(currentID) &&
//                 idNum <= Number(currentID) + Number(count_n_Word) - 1
//               );
//             })
//           : dataArray.slice(0, count_n_Word);

//         console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${filtered.length} –∑–∞–ø–∏—Å–µ–π –≤ ${filePath}`);

//         // 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
//         foundObjects.push(...filtered);
//       }

//       // 6. –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –∏–¥–µ–º –¥–∞–ª—å—à–µ
//       if (foundObjects.length === 0) {
//         console.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
//         return;
//       }

//       // 7. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ ID
//       const groupedById = await lastValueFrom(
//         from(foundObjects).pipe(
//           groupBy((item) => item.id),
//           mergeMap((group) => group.pipe(toArray())),
//           toArray() // ‚Üê –≤–æ—Ç —ç—Ç–æ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤ –º–∞—Å—Å–∏–≤
//         )
//       );

//       // 8. –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
//       console.log("‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ ID:");
//       console.log(groupedById);

//       // üëá –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
//       // groupedById.forEach((group) => {
//       //   group.forEach((entry) => processLines(JSON.stringify(entry)));
//       // });

//       console.log(
//         "‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–æ—á–µ—Ä—ë–¥–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π..."
//       );

//       for (const group of groupedById) {
//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –≥—Ä—É–ø–ø–µ
//         const groupId = Number(group[0]?.id);
//         const startId = Number(currentID);
//         const endId = startId + Number(count_n_Word) - 1;

//         // –ï—Å–ª–∏ ID –≥—Ä—É–ø–ø—ã –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
//         if (groupId > endId) {
//           console.log(
//             `‚èπ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ID (${groupId} > ${endId}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.`
//           );
//           break;
//         }

//         for (const entry of group) {
//           //--------------------------------------------------------------------------------
//           //1. —Ç—É—Ç –Ω–∞–¥–æ –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ foundObjects –Ω–∞—á–∞—Ç—å, —á–∏—Ç–∞—Ç—å –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ processLines –ø–æ –æ–¥–Ω–æ–π
//           // 2. –ø–µ—Ä–µ–¥–∞—á–∞ –∑–∞–ø–∏—Å–∏ –≤ processLines –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ -----------------while (isPaused) {
//           //   await new Promise((resolve) => setTimeout(resolve, 100));
//           // }
//           // const initialSeconds = sec / 1000;
//           // countdown(initialSeconds, initialSeconds);

//           // window.speechSynthesis.cancel();
//           // processLines(...........);-------------------
//           //3. –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á—Ç–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏, —á–∏—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–∑ foundObjects –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ processLines –ø–æ–≤—Ç–æ—Ä—è—è –ø—Ä–æ—Ü–µ—Å—Å
//           //4. –∏ —Ç–∞–∫ –ø–æ–∫–∞ –Ω–µ –∫–æ–Ω—á–∞—Ç—Å—è –∑–∞–ø–∏—Å–∏ –≤ foundObjects
//           //5. –∫–æ–≥–¥–∞ –∫–æ–Ω—á–∞—Ç—Å—è –∑–∞–ø–∏—Å–∏ –≤ foundObjects, —Ç–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
//           //--------------------------------------------------------------------------------

//           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
//           while (isPaused) {
//             await new Promise((resolve) => setTimeout(resolve, 100));
//           }

//           // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
//           const initialSeconds = sec / 1000;
//           countdown(initialSeconds, initialSeconds);

//           // –°–±—Ä–æ—Å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
//           // window.speechSynthesis.cancel();

//           // –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–ø–∏—Å–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
//           console.log(`‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ ID=${entry.id} (${entry.name})`);
//           processLines(JSON.stringify(entry));

//           // –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é
//           await new Promise((resolve) => setTimeout(resolve, sec));
//         }
//       }

//       console.log("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.");

//       console.log("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ groupedById –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.");
//     } catch (error) {
//       console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:", error);
//     }
//   },

//   pause: function () {
//     isPaused = true;
//   },

//   resume: function () {
//     if (isPaused) {
//       isPaused = false;
//       myModule.readNextString?.(); // Optional chaining in case not defined yet
//     } else {
//       console.log("Speech synthesis is not paused. Cannot resume.");
//     }
//   },
// };

// export default myModule;

document.addEventListener("keydown", function (event) {
  if (event.key === "Enter") {
    event.preventDefault();
  }
});

let selectedVoiceName;

const voiceList = document.getElementById("voiceSelect");
const synth = window.speechSynthesis;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤
export function voices() {
  voiceList.innerHTML = ""; // –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã

  function populateVoiceList() {
    const availableVoices = synth.getVoices() || [];
    console.log("üéôÔ∏è –ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤:", availableVoices.length, availableVoices);

    if (availableVoices.length === 0) {
      console.warn("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –ø—É—Å—Ç. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...");
      return;
    }

    // üéØ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    const ruPatterns = [
      "Google —Ä—É—Å—Å–∫–∏–π", // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π
      "—Ä—É—Å—Å–∫–∏–π –†–æ—Å—Å–∏—è",
      "—Ä—É—Å—Å–∫–∏–π –†–æ—Å—Å–∏—è (ru-RU)",
      "Microsoft Irina", // —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä
      "ru-RU",
      "–†—É—Å—Å–∫–∏–π (–†–æ—Å—Å–∏—è)",
    ];

    // üîç –ü–æ–∏—Å–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    let ruVoice = null;
    for (const pattern of ruPatterns) {
      ruVoice = availableVoices.find(
        (voice) => voice.name.includes(pattern) || voice.lang.includes(pattern)
      );
      if (ruVoice) break;
    }

    // üßæ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (ruVoice) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å: ${ruVoice.name} (${ruVoice.lang})`);
    } else {
      console.warn("‚ö†Ô∏è –†—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }

    // ü™£ –ó–∞–ø–æ–ª–Ω—è–µ–º select —Å–ø–∏—Å–∫–æ–º –≥–æ–ª–æ—Å–æ–≤
    voiceList.innerHTML = "";
    availableVoices.forEach((voice) => {
      const option = document.createElement("option");
      option.textContent = `${voice.name} (${voice.lang})`;
      option.value = voice.name;

      // –≤—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      if (ruVoice && voice.name === ruVoice.name) {
        option.selected = true;
      }

      voiceList.appendChild(option);
    });

    // üíæ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return ruVoice;
  }

  // üïì –ï—Å–ª–∏ –≥–æ–ª–æ—Å–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚Äî —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º populateVoiceList()
  if (synth.getVoices().length > 0) {
    return populateVoiceList();
  }

  // ‚è≥ –ò–Ω–∞—á–µ –∂–¥—ë–º, –ø–æ–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ voiceschanged
  synth.onvoiceschanged = populateVoiceList;
}

const voicePlay = {
  getUtterance: function (text, language, currentButton1) {
    const rate = document.getElementById("speed").value;
    const pitch = document.getElementById("pitch").value;
    const availableVoices = synth.getVoices();
    let selectedVoice = null;

    console.log("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã getUtterance:", {
      text,
      language,
      currentButton1,
    });

    // ---------------------------
    // üîπ –í–∞—Ä–∏–∞–Ω—Ç 1: —Ä–µ–∂–∏–º –ø–æ–¥–±–æ—Ä–∞ –ø–æ —è–∑—ã–∫—É
    // ---------------------------
    if (language && currentButton1 === "but1") {
      const languageMap = {
        En: [
          "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã (en-US)",
          "(en-US)",
          /[^"]*\(en-US\)/,
          "Google US English (en-US)",
        ],
        Pl: [
          "–ø–æ–ª—å—Å–∫–∏–π –ü–æ–ª—å—à–∞ (pl-PL)",
          "(pl-PL)",
          /[^"]*\(pl-PL\)/,
          "Google polski (pl-PL)",
        ],
        Gr: [
          "–≥—Ä–µ—á–µ—Å–∫–∏–π –ì—Ä–µ—Ü–∏—è (el-GR)",
          "(el-GR)",
          /[^"]*\(el-GR\)/,
          "Greek (el-GR)",
        ],
        It: [
          "italiano Italia (it-IT)",
          "(it-IT)",
          /[^"]*\(it-IT\)/,
          "Google italiano (it-IT)",
        ],
        Du: [
          "–Ω–µ–º–µ—Ü–∫–∏–π –ì–µ—Ä–º–∞–Ω–∏—è (de-DE)",
          "(de-DE)",
          /[^"]*\(de-DE\)/,
          "Google Deutsch (de-DE)",
        ],
      };

      const possibleMatches = languageMap[language] || [];

      // 1Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
      selectedVoice = availableVoices.find((v) =>
        possibleMatches.some((match) => {
          const full = `${v.name || ""} (${v.lang || ""})`;

          if (Object.prototype.toString.call(match) === "[object RegExp]") {
            return match.test(full) || match.test(v.name) || match.test(v.lang);
          }

          if (typeof match === "string") {
            return (
              (v.name && v.name.includes(match)) ||
              (v.lang && v.lang === match) ||
              full === match
            );
          }
          return false;
        })
      );

      // 2Ô∏è‚É£ –§–æ–ª–ª–±—ç–∫ –ø–æ –∫–æ–¥—É —è–∑—ã–∫–∞ (en, pl, el, de)
      if (!selectedVoice) {
        const langPrefixMap = {
          En: ["en-US", "en-GB", "en"],
          Pl: ["pl-PL", "pl"],
          Gr: ["el-GR", "el"],
          It: ["it-IT", "it"],
          Du: ["de-DE", "de"],
        };

        const prefixes = langPrefixMap[language] || [];

        selectedVoice = availableVoices.find((v) =>
          prefixes.some((p) => {
            const langLower = v.lang?.toLowerCase() || "";
            const fullLower = `${v.name || ""} (${v.lang || ""})`.toLowerCase();
            return (
              langLower === p.toLowerCase() ||
              langLower.startsWith(p.toLowerCase()) ||
              fullLower.includes(p.toLowerCase())
            );
          })
        );
      }

      if (selectedVoice) {
        console.log(
          `üó£Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –¥–ª—è —è–∑—ã–∫–∞ ${language}: ${selectedVoice.name} (${selectedVoice.lang})`
        );
      } else {
        console.warn(`‚ö†Ô∏è –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ ${language}`);
      }
    }

    // ---------------------------
    // üîπ –í–∞—Ä–∏–∞–Ω—Ç 2: –µ–¥–∏–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
    // ---------------------------
    if (!selectedVoice && language && currentButton1 === "but2") {
      const russianMatches = [
        "—Ä—É—Å—Å–∫–∏–π –†–æ—Å—Å–∏—è (ru-RU)",
        /[^"]*\(ru-RU\)/,
        "Google —Ä—É—Å—Å–∫–∏–π (ru-RU)",
        "(ru-RU)",
        "ru-RU",
      ];

      selectedVoice = availableVoices.find((v) =>
        russianMatches.some((match) => {
          const full = `${v.name || ""} (${v.lang || ""})`;

          if (Object.prototype.toString.call(match) === "[object RegExp]") {
            return match.test(full) || match.test(v.name) || match.test(v.lang);
          }

          if (typeof match === "string") {
            return (
              (v.name && v.name.includes(match)) ||
              (v.lang && v.lang === match) ||
              full === match
            );
          }
          return false;
        })
      );

      if (selectedVoice) {
        console.log(
          `üá∑üá∫ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ–¥–∏–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å: ${selectedVoice.name} (${selectedVoice.lang})`
        );
      } else {
        console.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –¥–ª—è —Ä–µ–∂–∏–º–∞ but2");
      }
    }

    // ---------------------------
    // ‚öôÔ∏è Fallback (UI / –ø–µ—Ä–≤—ã–π)
    // ---------------------------
    if (!selectedVoice) {
      const selectedVoiceName = voiceList.value;
      selectedVoice = availableVoices.find((v) => v.name === selectedVoiceName);

      if (selectedVoice) {
        console.log(
          `üîÅ Fallback: –≤—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å –∏–∑ UI ‚Äî ${selectedVoice.name} (${selectedVoice.lang})`
        );
      } else if (availableVoices.length > 0) {
        selectedVoice = availableVoices[0];
        console.warn(
          `‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å: ${selectedVoice.name} (${selectedVoice.lang})`
        );
      } else {
        console.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ!");
      }
    }

    // ---------------------------
    // üéß –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ—á–∏
    // ---------------------------
    const U = new SpeechSynthesisUtterance(text);
    U.voice = selectedVoice;
    U.lang = selectedVoice.lang;
    U.volume = 1;
    U.rate = rate;
    U.pitch = pitch;

    console.log(`‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–±–æ—Ä: ${U.voice.name} (${U.lang})`);

    return U;
  },
};

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
voiceList.addEventListener("change", function () {
  selectedVoiceName = voiceList.value;
  console.log(`–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: ${selectedVoiceName}`);
});

export default voicePlay;

// document.addEventListener("keydown", function (event) {
//   if (event.key === "Enter") {
//     event.preventDefault();
//   }
// });

// const voiceList = document.getElementById("voiceSelect");

// let selectedVoiceName;
// const synth = window.speechSynthesis;

// export function voices() {
//   voiceList.innerHTML = ""; // –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã

//   let availableVoices = synth.getVoices();
//   let defaultVoice = getDefaultVoice(availableVoices);

//   // console.log("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤:");
//   availableVoices.forEach((voice) => {
//     let option = `<option value="${voice.name}">${voice.name} (${voice.lang})</option>`;
//     voiceList.insertAdjacentHTML("beforeend", option);

//     // console.log(
//     //   `${voice.name} (${voice.lang}) ${voice.default ? "[default]" : ""}`
//     // );
//   });

//   // –ò—â–µ–º Google US English (en-US)
//   let preferredVoice = availableVoices.find(
//     (v) => v.name === "Google US English" && v.lang === "en-US"
//   );

//   if (preferredVoice) {
//     // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –µ–≥–æ
//     voiceList.value = preferredVoice.name;
//     // console.log(
//     //   "–í—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
//     //   preferredVoice.name,
//     //   `(${preferredVoice.lang})`
//     // );
//   } else if (defaultVoice) {
//     // fallback –µ—Å–ª–∏ Google US English –Ω–µ—Ç
//     voiceList.value = defaultVoice.name;
//     // console.log(
//     //   "–í—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
//     //   defaultVoice.name,
//     //   `(${defaultVoice.lang})`
//     // );
//   } else {
//     console.log("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
//   }
// }

// function getDefaultVoice(voices) {
//   return voices.find(
//     (voice) => voice.lang === "(en-US)" || voice.lang === "(en-GB)"
//   );
// }

// const voicePlay = {
//   getUtterance: function (text, language, currentButton1) {
//     const rate = document.getElementById("speed").value;
//     const pitch = document.getElementById("pitch").value;
//     const availableVoices = synth.getVoices();
//     let selectedVoice = null;

//     // üîç –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
//     console.log("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã getUtterance:", {
//       text,
//       language,
//       currentButton1,
//     });

//     // ---------------------------
//     // üîπ –í–∞—Ä–∏–∞–Ω—Ç 1: —Ä–µ–∂–∏–º –ø–æ–¥–±–æ—Ä–∞ –ø–æ —è–∑—ã–∫—É
//     // ---------------------------
//     if (language && currentButton1 === "but1") {
//       const languageMap = {
//         En: [
//           "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã (en-US)",
//           "(en-US)",
//           /"[^"]*\(en-US\)"/g,
//           "Google US English (en-US)",
//         ],
//         Pl: [
//           "–ø–æ–ª—å—Å–∫–∏–π –ü–æ–ª—å—à–∞ (pl-PL)",
//           "(pl-PL)",
//           /"[^"]*\(pl-PL\)"/g,
//           "Google polski (pl-PL)",
//           // "pl-PL"
//         ],
//         Gr: [
//           "–≥—Ä–µ—á–µ—Å–∫–∏–π –ì—Ä–µ—Ü–∏—è (el-GR)",
//           "(el-GR)",
//           /"[^"]*\(el-GR\)"/g,
//           "Google —Ä—É—Å—Å–∫–∏–π (ru-RU)",
//           // "el-GR",
//         ],
//         Du: [
//           "–Ω–µ–º–µ—Ü–∫–∏–π –ì–µ—Ä–º–∞–Ω–∏—è (de-DE)",
//           "(de-DE)",
//           /"[^"]*\(de-DE\)"/g,
//           "Google Deutsch (de-DE)",
//           // "de-DE",
//         ],
//       };

//       const possibleMatches = languageMap[language] || [];

//       selectedVoice = availableVoices.find((v) =>
//         possibleMatches.some(
//           (match) =>
//             v.name.includes(match) ||
//             v.lang === match ||
//             `${v.name} (${v.lang})` === match
//         )
//       );

//       if (selectedVoice) {
//         console.log(
//           `üó£Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –¥–ª—è —è–∑—ã–∫–∞ ${language}: ${selectedVoice.name} (${selectedVoice.lang})`
//         );
//       } else {
//         console.warn(`‚ö†Ô∏è –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ ${language}`);
//       }
//     }

//     // ---------------------------
//     // üîπ –í–∞—Ä–∏–∞–Ω—Ç 2: –µ–¥–∏–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
//     // ---------------------------
//     if (language && currentButton1 === "but2") {
//       const russianMatches = [
//         "Google —Ä—É—Å—Å–∫–∏–π (ru-RU)",
//         "—Ä—É—Å—Å–∫–∏–π –†–æ—Å—Å–∏—è (ru-RU)",
//         "(ru-RU)",
//         "ru-RU",
//       ];

//       selectedVoice = availableVoices.find((v) =>
//         possibleMatches.some((match) => {
//           // üß© –ó–∞—â–∏—Ç–∞ –æ—Ç RegExp
//           const isRegExp =
//             Object.prototype.toString.call(match) === "[object RegExp]";

//           // üß© –ï—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–∫–∞
//           if (isRegExp) {
//             return (
//               match.test(v.name || "") ||
//               match.test(v.lang || "") ||
//               match.test(`${v.name} (${v.lang})`)
//             );
//           }

//           // üß© –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
//           if (typeof match === "string") {
//             return (
//               (v.name && v.name.includes(match)) ||
//               (v.lang && v.lang === match) ||
//               `${v.name} (${v.lang})` === match
//             );
//           }

//           // üö´ fallback
//           return false;
//         })
//       );

//       // selectedVoice = availableVoices.find((v) =>
//       //   russianMatches.some(
//       //     (match) =>
//       //       v.name.includes(match) ||
//       //       v.lang === match ||
//       //       `${v.name} (${v.lang})` === match
//       //   )
//       // );

//       if (selectedVoice) {
//         console.log(
//           `üá∑üá∫ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ–¥–∏–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å: ${selectedVoice.name} (${selectedVoice.lang})`
//         );
//       } else {
//         console.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –¥–ª—è —Ä–µ–∂–∏–º–∞ but2");
//       }
//     }

//     // ---------------------------
//     // ‚öôÔ∏è Fallback
//     // ---------------------------
//     if (!selectedVoice) {
//       const selectedVoiceName = voiceList.value;
//       selectedVoice = availableVoices.find((v) => v.name === selectedVoiceName);
//       console.log(
//         `üîÅ Fallback: –≤—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å –∏–∑ UI ‚Äî ${selectedVoiceName || "–Ω–µ –Ω–∞–π–¥–µ–Ω"}`
//       );
//     }

//     if (!selectedVoice) {
//       selectedVoice = availableVoices[0];
//       console.warn(
//         `‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å: ${selectedVoice.name}`
//       );
//     }

//     // ---------------------------
//     // üéß –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ—á–∏
//     // ---------------------------
//     const U = new SpeechSynthesisUtterance(text);
//     U.voice = selectedVoice;
//     U.lang = selectedVoice.lang;
//     U.volume = 1;
//     U.rate = rate;
//     U.pitch = pitch;

//     console.log(`‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–±–æ—Ä: ${U.voice.name} (${U.lang})`);

//     return U;
//   },
// };

// // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
// voiceList.addEventListener("change", function () {
//   selectedVoiceName = voiceList.value;
// });

// export default voicePlay;

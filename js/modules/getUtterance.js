document.addEventListener("keydown", function (event) {
  if (event.key === "Enter") {
    event.preventDefault();
  }
});

const voiceList = document.getElementById("voiceSelect");

let selectedVoiceName;
const synth = window.speechSynthesis;

export function voices() {
  voiceList.innerHTML = ""; // –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã

  let availableVoices = synth.getVoices();
  let defaultVoice = getDefaultVoice(availableVoices);

  // console.log("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤:");
  availableVoices.forEach((voice) => {
    let option = `<option value="${voice.name}">${voice.name} (${voice.lang})</option>`;
    voiceList.insertAdjacentHTML("beforeend", option);

    // console.log(
    //   `${voice.name} (${voice.lang}) ${voice.default ? "[default]" : ""}`
    // );
  });

  // –ò—â–µ–º Google US English (en-US)
  let preferredVoice = availableVoices.find(
    (v) => v.name === "Google US English" && v.lang === "en-US"
  );

  if (preferredVoice) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –µ–≥–æ
    voiceList.value = preferredVoice.name;
    // console.log(
    //   "–í—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
    //   preferredVoice.name,
    //   `(${preferredVoice.lang})`
    // );
  } else if (defaultVoice) {
    // fallback –µ—Å–ª–∏ Google US English –Ω–µ—Ç
    voiceList.value = defaultVoice.name;
    // console.log(
    //   "–í—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
    //   defaultVoice.name,
    //   `(${defaultVoice.lang})`
    // );
  } else {
    console.log("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
  }
}

function getDefaultVoice(voices) {
  return voices.find(
    (voice) => voice.lang === "(en-US)" || voice.lang === "(en-GB)"
  );
}

const voicePlay = {
  getUtterance: function (text, language, currentButton1) {
    const rate = document.getElementById("speed").value;
    const pitch = document.getElementById("pitch").value;
    const availableVoices = synth.getVoices();
    let selectedVoice = null;

    // üîç –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    console.log("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã getUtterance:", {
      text,
      language,
      currentButton1,
    });

    // ---------------------------
    // üîπ –í–∞—Ä–∏–∞–Ω—Ç 1: —Ä–µ–∂–∏–º –ø–æ–¥–±–æ—Ä–∞ –ø–æ —è–∑—ã–∫—É
    // ---------------------------
    if (language && currentButton1 === "but1") {
      const languageMap = {
        En: [
          "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã (en-US)",
          "Google US English (en-US)",
          "en-US",
        ],
        Pl: ["–ø–æ–ª—å—Å–∫–∏–π –ü–æ–ª—å—à–∞ (pl-PL)", "Google polski (pl-PL)", "pl-PL"],
        Gr: ["–≥—Ä–µ—á–µ—Å–∫–∏–π –ì—Ä–µ—Ü–∏—è (el-GR)", "Google —Ä—É—Å—Å–∫–∏–π (ru-RU)", "el-GR"],
        Du: ["–Ω–µ–º–µ—Ü–∫–∏–π –ì–µ—Ä–º–∞–Ω–∏—è (de-DE)", "Google Deutsch (de-DE)", "de-DE"],
      };

      const possibleMatches = languageMap[language] || [];

      selectedVoice = availableVoices.find((v) =>
        possibleMatches.some(
          (match) =>
            v.name.includes(match) ||
            v.lang === match ||
            `${v.name} (${v.lang})` === match
        )
      );

      if (selectedVoice) {
        console.log(
          `üó£Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –¥–ª—è —è–∑—ã–∫–∞ ${language}: ${selectedVoice.name} (${selectedVoice.lang})`
        );
      } else {
        console.warn(`‚ö†Ô∏è –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ ${language}`);
      }
    }

    // ---------------------------
    // üîπ –í–∞—Ä–∏–∞–Ω—Ç 2: –µ–¥–∏–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
    // ---------------------------
    if (language && currentButton1 === "but2") {
      const russianMatches = [
        "Google —Ä—É—Å—Å–∫–∏–π (ru-RU)",
        "—Ä—É—Å—Å–∫–∏–π –†–æ—Å—Å–∏—è (ru-RU)",
        "(ru-RU)",
        "ru-RU",
      ];

      selectedVoice = availableVoices.find((v) =>
        russianMatches.some(
          (match) =>
            v.name.includes(match) ||
            v.lang === match ||
            `${v.name} (${v.lang})` === match
        )
      );

      if (selectedVoice) {
        console.log(
          `üá∑üá∫ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ–¥–∏–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å: ${selectedVoice.name} (${selectedVoice.lang})`
        );
      } else {
        console.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –¥–ª—è —Ä–µ–∂–∏–º–∞ but2");
      }
    }

    // ---------------------------
    // ‚öôÔ∏è Fallback
    // ---------------------------
    if (!selectedVoice) {
      const selectedVoiceName = voiceList.value;
      selectedVoice = availableVoices.find((v) => v.name === selectedVoiceName);
      console.log(
        `üîÅ Fallback: –≤—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å –∏–∑ UI ‚Äî ${selectedVoiceName || "–Ω–µ –Ω–∞–π–¥–µ–Ω"}`
      );
    }

    if (!selectedVoice) {
      selectedVoice = availableVoices[0];
      console.warn(
        `‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å: ${selectedVoice.name}`
      );
    }

    // ---------------------------
    // üéß –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ—á–∏
    // ---------------------------
    const U = new SpeechSynthesisUtterance(text);
    U.voice = selectedVoice;
    U.lang = selectedVoice.lang;
    U.volume = 1;
    U.rate = rate;
    U.pitch = pitch;

    console.log(`‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–±–æ—Ä: ${U.voice.name} (${U.lang})`);

    return U;
  },
};

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
voiceList.addEventListener("change", function () {
  selectedVoiceName = voiceList.value;
});

export default voicePlay;

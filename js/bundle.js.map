{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://dictatingenglishspeaker.loc/./js/modules/IdDataHandler.js","webpack://dictatingenglishspeaker.loc/./js/modules/buttonsClickHandler.js","webpack://dictatingenglishspeaker.loc/./js/modules/controlCheckBox.js","webpack://dictatingenglishspeaker.loc/./js/modules/countdownTimer.js","webpack://dictatingenglishspeaker.loc/./js/modules/getUtterance.js","webpack://dictatingenglishspeaker.loc/./js/modules/myModule.js","webpack://dictatingenglishspeaker.loc/./js/modules/processLines.js","webpack://dictatingenglishspeaker.loc/webpack/bootstrap","webpack://dictatingenglishspeaker.loc/webpack/runtime/define property getters","webpack://dictatingenglishspeaker.loc/webpack/runtime/hasOwnProperty shorthand","webpack://dictatingenglishspeaker.loc/webpack/runtime/make namespace object","webpack://dictatingenglishspeaker.loc/./js/script.js"],"sourcesContent":["import myModule from \"./myModule.js\";\r\n\r\nconst inputElements = document.querySelectorAll(\".form-point\");\r\nconst gapElement = document.querySelector(\"#gap\");\r\n\r\nconst IdDataHandler = {\r\n  existingUseID: function (target, currentButton) {\r\n    const useID = inputElements[0].value;\r\n    // console.log(\"нужное id найдено\", useID);\r\n    const sec = Number(gapElement.value) * 1000;\r\n    // console.log(\"нужное sec найдено\", sec);\r\n    myModule.words(useID, sec, currentButton);\r\n  },\r\n};\r\n\r\nexport default IdDataHandler;\r\n","import IdDataHandler from \"./IdDataHandler.js\";\r\nimport myModule from \"./myModule.js\";\r\n\r\nlet currentButton;\r\n\r\nconst buttonsClickHandler = {\r\n  handleClick: function (event) {\r\n    const target = event.target;\r\n    currentButton = target.id;\r\n\r\n    switch (target.className) {\r\n      case \"play\":\r\n        speechSynthesis.cancel();\r\n        IdDataHandler.existingUseID(target, currentButton);\r\n        console.log(\"Play button clicked\");\r\n        break;\r\n      case \"pause\":\r\n        console.log(\"Pause button clicked\");\r\n        speechSynthesis.pause();\r\n        myModule.pause();\r\n        break;\r\n      case \"resume\":\r\n        console.log(\"Resume button clicked\");\r\n        speechSynthesis.resume();\r\n        console.log(\"Speech synthesis resumed\");\r\n        myModule.resume();\r\n        break;\r\n      default:\r\n        console.log(`Unhandled class: ${target.className}`);\r\n    }\r\n  },\r\n};\r\n\r\nexport { currentButton };\r\nexport default buttonsClickHandler;\r\n","const controlCheckBox = () => {\r\n  // Обработка изменения состояния чекбоксов\r\n  document.querySelectorAll(\".checkbox\").forEach((checkbox) => {\r\n    checkbox.addEventListener(\"change\", function () {\r\n      if (this.checked) {\r\n        // Если текущий чекбокс выбран, отключаем остальные чекбоксы\r\n        document.querySelectorAll(\".checkbox\").forEach((box) => {\r\n          if (box !== this) {\r\n            box.disabled = true;\r\n          }\r\n        });\r\n      } else {\r\n        // Если текущий чекбокс не выбран, включаем все чекбоксы\r\n        document.querySelectorAll(\".checkbox\").forEach((box) => {\r\n          box.disabled = false;\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // Проверка состояния чекбоксов при загрузке страницы\r\n  window.addEventListener(\"load\", function () {\r\n    const firstCheckbox = document.querySelector('.checkbox[name=\"option1\"]');\r\n    if (firstCheckbox && firstCheckbox.checked) {\r\n      // Если первый чекбокс выбран, отключаем остальные чекбоксы\r\n      document.querySelectorAll(\".checkbox\").forEach((box) => {\r\n        if (box !== firstCheckbox) {\r\n          box.disabled = true;\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexport default controlCheckBox;\r\n","const countdown = (seconds, initialSeconds) => {\r\n  const countdownElement = document.getElementById(\"countdown\");\r\n  const circle = document.querySelector(\".progress-ring__circle\");\r\n  const endDot = document.querySelector(\".progress-ring__dot\"); // Новый элемент для точки\r\n  const radius = circle.r.baseVal.value;\r\n  const circumference = 2 * Math.PI * radius;\r\n\r\n  circle.style.strokeDasharray = `${circumference} ${circumference}`;\r\n  circle.style.strokeDashoffset = circumference;\r\n\r\n  const formatTime = (seconds) => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    return `${String(minutes).padStart(2, \"0\")}:${String(\r\n      remainingSeconds\r\n    ).padStart(2, \"0\")}`;\r\n  };\r\n\r\n  const setProgress = (percent) => {\r\n    const offset = circumference - (percent / 100) * circumference;\r\n    circle.style.strokeDashoffset = offset;\r\n\r\n    const angle = ((360 * percent) / 100) * (Math.PI / 180); // Угол в радианах\r\n    const x = 60 + radius * Math.cos(angle - Math.PI / 2); // Вычисляем x-координату точки\r\n    const y = 60 + radius * Math.sin(angle - Math.PI / 2); // Вычисляем y-координату точки\r\n    endDot.setAttribute(\"cx\", x);\r\n    endDot.setAttribute(\"cy\", y);\r\n  };\r\n\r\n  const timer = setInterval(() => {\r\n    countdownElement.textContent = formatTime(seconds);\r\n    const progress = (seconds / initialSeconds) * 100;\r\n    setProgress(progress);\r\n\r\n    if (seconds <= 0) {\r\n      clearInterval(timer);\r\n      countdownElement.textContent = \"Время истекло!\";\r\n    }\r\n    seconds--;\r\n  }, 1000);\r\n};\r\n\r\nexport default countdown;\r\n","const voiceList = document.querySelector(\"#voiceSelect\");\r\nconst synth = speechSynthesis;\r\n\r\nexport function voices() {\r\n  voiceList.innerHTML = \"\";\r\n  let availableVoices = synth.getVoices();\r\n  let defaultVoice = getDefaultVoice(availableVoices);\r\n\r\n  availableVoices.forEach((voice) => {\r\n    let selected = voice === defaultVoice ? \"selected\" : \"\";\r\n\r\n    let option = `<option value=\"${voice.name}\" ${selected}>${voice.name} (${voice.lang})</option>`;\r\n\r\n    voiceList.insertAdjacentHTML(\"beforeend\", option);\r\n  });\r\n}\r\n\r\nsynth.onvoiceschanged = voices;\r\n\r\nfunction getDefaultVoice(voices) {\r\n  return voices.find(\r\n    (voice) => voice.lang === \"en-US\" || voice.lang === \"en-GB\"\r\n  );\r\n}\r\n\r\nconst voicePlay = {\r\n  getUtterance: function (text) {\r\n    const rate = document.getElementById(\"speed\").value;\r\n    const pitch = document.getElementById(\"pitch\").value;\r\n\r\n    const availableVoices = speechSynthesis.getVoices();\r\n    const selectedVoiceName = voiceList.value;\r\n\r\n    if (availableVoices.length > 0) {\r\n      const selectedVoice = availableVoices.find(\r\n        (voice) => voice.name === selectedVoiceName\r\n      );\r\n\r\n      const U = new SpeechSynthesisUtterance(text);\r\n      U.voice = selectedVoice;\r\n      U.lang = selectedVoice.lang;\r\n      U.volume = 1;\r\n      U.rate = rate;\r\n      U.pitch = pitch;\r\n\r\n      return U;\r\n    } else {\r\n      return null;\r\n    }\r\n  },\r\n};\r\n\r\nexport default voicePlay;\r\n","import processLines from \"./processLines.js\";\r\nimport countdown from \"./countdownTimer.js\";\r\n\r\nlet isPaused = false;\r\nlet currentID = null;\r\nlet currentButton = null;\r\n// let foundObject = null;\r\n\r\nconst myModule = {\r\n  words: async function (startID, sec, currentButton) {\r\n    let currentID = startID;\r\n    // 1. Указываем путь к файлу\r\n    const filePath = \"../db.json\";\r\n    const foundObjects = [];\r\n\r\n    try {\r\n      // 2. Запрос данных через fetch API\r\n      const response = await fetch(filePath);\r\n\r\n      // 3. Обрабатываем ошибку соединени\r\n      if (!response.ok) {\r\n        throw new Error(\"Ошибка при загрузке файла\");\r\n      }\r\n\r\n      // 4. Получаем поток данных из тела ответа\r\n      const stream = response.body;\r\n\r\n      // 5. Создаем объект ReadableStreamDefaultReader для чтения потока\r\n      const reader = stream.getReader();\r\n\r\n      // 6. Распарсиваем поток\r\n      const decoder = new TextDecoder();\r\n      let result = \"\";\r\n      let done = false;\r\n\r\n      while (!done) {\r\n        const { value, done: streamDone } = await reader.read();\r\n        if (value) {\r\n          result += decoder.decode(value, { stream: !streamDone });\r\n        }\r\n        done = streamDone;\r\n      }\r\n\r\n      const jsonData = JSON.parse(result);\r\n      console.log(\"Данные распарсены\", jsonData);\r\n\r\n      // 7.Функция для чтения следующей строки с задержкой\r\n      async function readNextString() {\r\n        // Начинаем читать поток с указанного ID\r\n        const searchString = `\"id\": \"${currentID}\"`;\r\n        const startIndex = result.indexOf(searchString);\r\n\r\n        if (startIndex !== -1) {\r\n          const startBracketIndex = result.lastIndexOf(\"{\", startIndex);\r\n          const endBracketIndex = result.indexOf(\"}\", startIndex) + 1;\r\n          if (startBracketIndex !== -1 && endBracketIndex !== -1) {\r\n            const dataChunk = result.substring(\r\n              startBracketIndex,\r\n              endBracketIndex\r\n            );\r\n            // console.log(\"Прочитанная строка:\", dataChunk);\r\n\r\n            // Добавляем объект в массив найденных объектов\r\n            const foundObject = JSON.parse(dataChunk);\r\n            foundObjects.push(foundObject);\r\n\r\n            currentID++;\r\n\r\n            await new Promise((resolve) => setTimeout(resolve, sec));\r\n\r\n            while (isPaused) {\r\n              await new Promise((resolve) => setTimeout(resolve, 100));\r\n            }\r\n\r\n            const initialSeconds = sec / 1000;\r\n            countdown(initialSeconds, initialSeconds);\r\n\r\n            // Вызов processLines с переданными данными\r\n            processLines(dataChunk);\r\n\r\n            await readNextString();\r\n          } else {\r\n            console.log(\"Начало или конец строки не найдены.\");\r\n          }\r\n        } else {\r\n          console.log(`ID \"${currentID}\" Працесс закончен.Спасибо!`);\r\n        }\r\n      }\r\n\r\n      await readNextString();\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  },\r\n  pause: function () {\r\n    isPaused = true;\r\n    // console.log(`Paused ${isPaused}`);\r\n  },\r\n  resume: function () {\r\n    console.log(`Paused ${isPaused}`);\r\n\r\n    if (isPaused) {\r\n      isPaused = false;\r\n      if (currentID !== null && currentButton !== null) {\r\n        myModule.readNextString();\r\n      }\r\n    } else {\r\n      console.log(\"Speech synthesis is not paused, cannot resume\");\r\n    }\r\n  },\r\n};\r\n\r\nexport default myModule;\r\n\r\n//---------------------------------------------------\r\n\r\n//  import processLines from \"./processLines\";\r\n// import countdown from \"./countdownTimer\";\r\n\r\n// const myModule = {\r\n//   words: async function (startID, sec) {\r\n//     let currentID = startID; // Инициализируем текущий ID\r\n\r\n//     // 1. Указываем путь к файлу\r\n//     const filePath = \"../db.json\";\r\n//     const foundObjects = []; // Массив для хранения найденных объектов\r\n\r\n//     try {\r\n//       // 2. Запрос данных через fetch API\r\n//       const response = await fetch(filePath);\r\n//       console.log(\"Файл загружен\");\r\n\r\n//       // 3. Обрабатываем ошибку соединения\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Ошибка при загрузке файла\");\r\n//       }\r\n\r\n//       // 4. Получаем поток данных из тела ответа\r\n//       const stream = response.body;\r\n//       console.log(\"Поток данных получен\", stream);\r\n\r\n//       // 5. Создаем объект ReadableStreamDefaultReader для чтения потока\r\n//       const reader = stream.getReader();\r\n//       console.log(\"Читатель потока создан\", reader);\r\n\r\n//       // 6. Распарсиваем поток\r\n//       const decoder = new TextDecoder();\r\n//       let result = \"\";\r\n//       let done = false;\r\n\r\n//       while (!done) {\r\n//         const { value, done: streamDone } = await reader.read();\r\n//         if (value) {\r\n//           result += decoder.decode(value, { stream: !streamDone });\r\n//         }\r\n//         done = streamDone;\r\n//       }\r\n\r\n//       const jsonData = JSON.parse(result);\r\n//       console.log(\"Данные распарсены\", jsonData);\r\n\r\n//       // Функция для чтения следующей строки с задержкой\r\n//       async function readNextString() {\r\n//         // Начинаем читать поток с указанного ID\r\n//         const searchString = `\"id\": \"${currentID}\"`;\r\n//         const startIndex = result.indexOf(searchString);\r\n\r\n//         if (startIndex !== -1) {\r\n//           const startBracketIndex = result.lastIndexOf(\"{\", startIndex);\r\n//           const endBracketIndex = result.indexOf(\"}\", startIndex) + 1;\r\n//           if (startBracketIndex !== -1 && endBracketIndex !== -1) {\r\n//             const dataChunk = result.substring(\r\n//               startBracketIndex,\r\n//               endBracketIndex\r\n//             );\r\n//             // console.log(\"Прочитанная строка:\", dataChunk);\r\n\r\n//             // Добавляем объект в массив найденных объектов\r\n//             const foundObject = JSON.parse(dataChunk);\r\n//             foundObjects.push(foundObject);\r\n\r\n//             // Увеличиваем текущий ID на 1\r\n//             currentID++;\r\n\r\n//             // Добавляем задержку в секундах перед выполнением следующего задания\r\n//             await new Promise((resolve) => setTimeout(resolve, sec));\r\n\r\n//             // Читаем следующую строку после задержки\r\n//             // console.log(\r\n//             //   \"Следующая прочитанная строка после задержки:\",\r\n//             //   dataChunk\r\n//             // );\r\n\r\n//             const initialSeconds = sec / 1000;\r\n//             countdown(initialSeconds, initialSeconds);\r\n//             processLines(dataChunk);\r\n\r\n//             // Рекурсивный вызов функции для чтения следующей строки\r\n//             await readNextString();\r\n//           } else {\r\n//             console.log(\"Начало или конец строки не найдены.\");\r\n//           }\r\n//         } else {\r\n//           console.log(`ID \"${currentID}\" Працесс закончен.Спасибо!`);\r\n//         }\r\n//       }\r\n\r\n//       // Вызываем функцию чтения строки\r\n//       await readNextString();\r\n//     } catch (error) {\r\n//       console.error(\"Ошибка:\", error);\r\n//     }\r\n//   },\r\n// };\r\n\r\n// export default myModule;\r\n\r\n//---------------------------------------------------\r\n// import processLines from \"./processLines\";\r\n\r\n// const myModule = {\r\n//   words: async function (useID, sec) {\r\n//     const filePath = \"../db.json\";\r\n\r\n//     try {\r\n//       const response = await fetch(filePath);\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Ошибка при загрузке файла\");\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n//       // Ищем объект в массиве \"dictionary\" по значению \"id\"\r\n//       const foundIndex = data.dictionary.findIndex(\r\n//         (dataWord) => dataWord.id === useID\r\n//       );\r\n\r\n//       if (foundIndex !== -1) {\r\n//         // Создаем поток для оставшейся части массива \"dictionary\" от найденного индекса\r\n//         const remainingData = data.dictionary.slice(foundIndex);\r\n\r\n//         // Очищаем предыдущий объект\r\n//         let previousObject = null;\r\n\r\n//         // Читаем объекты из потока и выводим их в консоль с задержкой\r\n//         for (const dataWord of remainingData) {\r\n//           // Очищаем предыдущий объект\r\n//           if (previousObject !== null) {\r\n//             console.clear();\r\n//           }\r\n//           // Выводим текущий объект в консоль  и запускаем и запускаем processLines()\r\n//           processLines(dataWord);\r\n//           console.log(dataWord);\r\n\r\n//           // Задержка в 2 секунды\r\n//           await new Promise((resolve) => setTimeout(resolve, sec));\r\n//           previousObject = dataWord;\r\n//         }\r\n//       } else {\r\n//         console.log(\"Объект с указанным id не найден\");\r\n//       }\r\n//       //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   },\r\n// };\r\n\r\n// export default myModule;\r\n","import { currentButton } from \"./buttonsClickHandler.js\";\r\nimport voicePlay from \"./getUtterance.js\";\r\n\r\nasync function processLines(dataChunk) {\r\n  console.log(`${currentButton}`);\r\n\r\n  const parsedData = JSON.parse(dataChunk);\r\n  const { id, name, title } = parsedData;\r\n  console.log(`${id} - ${name} - ${title}`);\r\n\r\n  let text;\r\n\r\n  if (currentButton === \"but1\" || currentButton === \"resumeButton\") {\r\n    text = `${name}`;\r\n    console.log(`${id} - ${text}`);\r\n  } else if (currentButton === \"but2\" || currentButton === \"resumeButton\") {\r\n    text = `${title}`;\r\n    console.log(`${id} - ${text}`);\r\n  }\r\n\r\n  document.getElementById(\"text1\").value = `${id} - ${name}`;\r\n  document.getElementById(\"text2\").value = `${id} - ${title}`;\r\n  document.cookie = `id=${id}; path=/`;\r\n\r\n  // Вызов voicePlay.getUtterance для воспроизведения текста\r\n  const utterance = voicePlay.getUtterance(text);\r\n  speechSynthesis.speak(utterance);\r\n}\r\n\r\nexport default processLines;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import buttonsClickHandler from \"./modules/buttonsClickHandler.js\";\r\nimport { voices } from \"./modules/getUtterance.js\";\r\nimport controlCheckBox from \"./modules/controlCheckBox.js\";\r\n\r\ndocument.addEventListener(\"keydown\", function (event) {\r\n  if (event.key === \"Enter\") {\r\n    event.preventDefault();\r\n  }\r\n});\r\n\r\nconst but1 = document.getElementById(\"but1\");\r\nconst but2 = document.getElementById(\"but2\");\r\n\r\nbut1.addEventListener(\"click\", (event) => {\r\n  buttonsClickHandler.handleClick(event);\r\n});\r\n\r\nbut2.addEventListener(\"click\", (event) => {\r\n  buttonsClickHandler.handleClick(event);\r\n});\r\n\r\ndocument.getElementById(\"but5\").addEventListener(\"click\", (event) => {\r\n  buttonsClickHandler.handleClick(event);\r\n});\r\n\r\ndocument.getElementById(\"resumeButton\").addEventListener(\"click\", (event) => {\r\n  buttonsClickHandler.handleClick(event);\r\n});\r\n\r\nvoices();\r\ncontrolCheckBox();\r\n"],"names":["myModule","inputElements","document","querySelectorAll","gapElement","querySelector","IdDataHandler","existingUseID","target","currentButton","useID","value","sec","Number","words","buttonsClickHandler","handleClick","event","id","className","speechSynthesis","cancel","console","log","pause","resume","concat","controlCheckBox","forEach","checkbox","addEventListener","_this","checked","box","disabled","window","firstCheckbox","countdown","seconds","initialSeconds","countdownElement","getElementById","circle","endDot","radius","r","baseVal","circumference","Math","PI","style","strokeDasharray","strokeDashoffset","formatTime","minutes","floor","remainingSeconds","String","padStart","setProgress","percent","offset","angle","x","cos","y","sin","setAttribute","timer","setInterval","textContent","progress","clearInterval","voiceList","synth","voices","innerHTML","availableVoices","getVoices","defaultVoice","getDefaultVoice","voice","selected","option","name","lang","insertAdjacentHTML","onvoiceschanged","find","voicePlay","getUtterance","text","rate","pitch","selectedVoiceName","length","selectedVoice","U","SpeechSynthesisUtterance","volume","_regeneratorRuntime","e","t","Object","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","processLines","isPaused","currentID","_words","_callee2","startID","filePath","foundObjects","readNextString","response","stream","reader","decoder","result","_yield$reader$read","streamDone","jsonData","_callee2$","_context2","_ref","_callee","searchString","startIndex","startBracketIndex","endBracketIndex","dataChunk","foundObject","_callee$","_context","indexOf","lastIndexOf","substring","JSON","parse","setTimeout","fetch","ok","body","getReader","TextDecoder","read","decode","t0","_x","_x2","_x3","_processLines","parsedData","title","utterance","cookie","speak","preventDefault","but1","but2"],"sourceRoot":""}